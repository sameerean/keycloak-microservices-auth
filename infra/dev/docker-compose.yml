version: '3'

services:

# https://itnext.io/dockerizing-an-angular-app-with-karma-and-protractor-containers-3b4c53ea807f
  # taskman-app:
  #   image: trion/ng-cli:latest
  #   container_name: 'taskman-app'
  #   volumes:
  #     - ../../taskman-app:/usr/app/
  #     # - /usr/app/node_modules
  #   working_dir: /usr/app/
  #   ports:
  #     - "8082:4200"
  #   command: >
  #     bash -c "npm install && ng serve --host 0.0.0.0"
  #   networks:
  #    - taskman-proto-net


# https://mherman.org/blog/dockerizing-an-angular-app/
# Look at this link for prod setup^
  # zg-mw-admin-ui:
  #   build:
  #     context: ../../zg-mw-admin-ui
  #     dockerfile: AdminUIDockerfile-dev
  #   ports:
  #     - "8082:4200"
  #   container_name: zg-mw-admin-ui
  #   volumes:
  #      - ../../zg-mw-admin-ui:/usr/src/app/zg-mw-admin-ui
  #      - /usr/src/app/zg-mw-admin-ui/node_modules
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   networks:
  #    - zg-mw-net

#  zg-mw-admin-ui:
#    build:
#      context: ../../zg-mw-admin-ui
#      dockerfile: AdminUIDockerfile-dev
#    ports:
#      - "8082:4201"
#    container_name: zg-mw-admin-ui
#    volumes:
#       - ../../zg-mw-admin-ui:/usr/src/app/zg-mw-admin-ui
#       - /usr/src/app/zg-mw-admin-ui/node_modules
#    networks:
#      - zg-mw-net
       
  taskmandb:
    image: mongo
    restart: always
    container_name: taskman-mongodb
    ports:
#       - 27017:27017
      - '27117-27119:27017-27019'
    environment:
      - MONGO_INITDB_DATABASE=taskmandb
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpwd123
    volumes:
      # seeding scripts
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
#       - ./mongo-entrypoint/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
#       - ./volumes/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      # named volumes
      - ~/.docker/taskman/mongodb:/data/db
      - ~/.docker/taskman/mongoconfig:/data/configdb
    networks:
      - taskman-proto-net
    # networks:
    #   taskman-proto-net:
    #     aliases:
    #       - taskmandb-web

  mongo-express:
    image: mongo-express
    # restart: always
    container_name: taskman-mongoexpress
    ports:
      - 8181:8081
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=adminpwd123
      - ME_CONFIG_MONGODB_SERVER=taskmandb
      # - ME_CONFIG_MONGODB_PORT=27117
    # links:
    #   - taskman-db:mongo
    depends_on:
      - taskmandb
    networks:
      - taskman-proto-net
    # networks:
    #   taskman-proto-net:
    #     aliases:
    #       - mongo-express-web


#   quarkus-app:
#     build:
#       context: ../
#       dockerfile: src/main/docker/Dockerfile.jvm
#     image: sameerean/quarkus-mongo-reactive:0.1
#     container_name: quarkus-mongo-reactive-app
#     depends_on:
#       - mongo-db
#     ports:
#       - 8082:8080
#     networks:
#       - quarkus-samples-network

       
  # zg-middleware:
  #   image: maven
  #   volumes: 
  #     - "../../nedap-dahua-integration:/app"
  #     - "~/.m2:/root/.m2"
  #   ports:
  #     - 5005:5005 # Debug port
  #     - 8080:8080
  #   working_dir: /app
  #   command: "mvn quarkus:dev"
  #   container_name: zg-middleware
  #   depends_on:
  #     - mongo-db
  #   networks:
  #     - zg-mw-net

       
#  Portainer
  portainerservice:
    image: portainer/portainer
    container_name: taskman-portainer
    volumes:
      - ~/.docker/taskman/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
      # - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8084:9000"
    networks:
      - taskman-proto-net
    # networks:
    #   taskman-proto-net:
    #     aliases:
    #       - portainerservice-web


  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    volumes:
      - ~/.docker/taskman/postgres_data:/data
      # - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - taskman-proto-net

  keycloak-service:
    image: quay.io/keycloak/keycloak:latest
    # image: jboss/keycloak:latest
    container_name: keycloak-service
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      PROXY_ADDRESS_FORWARDING: "true"
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
      # JDBC_PARAMS: "jdbc:postgresql://keycloak:5432/keycloak"
    ports:
      - 8182:8080
    depends_on:
      - postgres-keycloak
    networks:
      - taskman-proto-net

# nginx
  nginx:
    image: nginx:latest
    container_name: taskman-nginx
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../../intro-web:/var/www/keycloak-ms-auth
    ports:
      - 80:80
      - 443:443
    depends_on:
      - keycloak-service
      - portainerservice
      - mongo-express
    # networks:
    #   - taskman-proto-net
    networks:
      - taskman-proto-net
    # networks:
    #   taskman-proto-net:
    #     aliases:
    #       - nginx-web

# volumes:
#   zg-mw-portainer:
#   zg-mw-mongodb:
#   zg-mw-mongoconfig:



networks:
  taskman-proto-net:
    driver: bridge